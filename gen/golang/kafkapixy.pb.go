// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: kafkapixy.proto

package golang

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key in the header key-value pair
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value in the header key-value pair
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RecordHeader) Reset() {
	*x = RecordHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHeader) ProtoMessage() {}

func (x *RecordHeader) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordHeader.ProtoReflect.Descriptor instead.
func (*RecordHeader) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{0}
}

func (x *RecordHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RecordHeader) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProdRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster to operate on.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic to produce to.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Hash of the key is used to determine the partition to produce to. By
	// default it is an empty array which is a valid key, unless key_undefined
	// is set to true and then a random partition is selected.
	KeyValue []byte `protobuf:"bytes,3,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// If true then the message is written to a random partition, otherwise
	// hash of key_value is used to determine the partition.
	KeyUndefined bool `protobuf:"varint,4,opt,name=key_undefined,json=keyUndefined,proto3" json:"key_undefined,omitempty"`
	// Message body.
	Message []byte `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// If true then the method returns immediately after Kafka-Pixy gets the
	// produce request, and the message is written to Kafka asynchronously.
	// In that case partition and offset returned in response should be ignored.
	// If false, then a response is returned in accordance with the
	// producer.required_acks parameter, that can be one of:
	//  * no_response:    the response is returned as soon as a produce request
	//                    is delivered to a partition leader Kafka broker.
	//  * wait_for_local: the response is returned as soon as data is written
	//                    to the disk by a partition leader Kafka broker.
	//  * wait_for_all:   the response is returned after all in-sync replicas
	//                    have data committed to disk.
	AsyncMode bool `protobuf:"varint,6,opt,name=async_mode,json=asyncMode,proto3" json:"async_mode,omitempty"`
	// Headers to include with the published message
	Headers []*RecordHeader `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *ProdRq) Reset() {
	*x = ProdRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdRq) ProtoMessage() {}

func (x *ProdRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdRq.ProtoReflect.Descriptor instead.
func (*ProdRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{1}
}

func (x *ProdRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ProdRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProdRq) GetKeyValue() []byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *ProdRq) GetKeyUndefined() bool {
	if x != nil {
		return x.KeyUndefined
	}
	return false
}

func (x *ProdRq) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProdRq) GetAsyncMode() bool {
	if x != nil {
		return x.AsyncMode
	}
	return false
}

func (x *ProdRq) GetHeaders() []*RecordHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ProdRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition the message was written to. The value only makes sense if
	// ProdReq.async_mode was false.
	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Offset the message was written to. The value only makes sense if
	// ProdReq.async_mode was false.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ProdRs) Reset() {
	*x = ProdRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProdRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProdRs) ProtoMessage() {}

func (x *ProdRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProdRs.ProtoReflect.Descriptor instead.
func (*ProdRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{2}
}

func (x *ProdRs) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ProdRs) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ConsNAckRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster to operate on.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic to produce to.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Name of a consumer group.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// If true then no message is acknowledged by the request.
	NoAck bool `protobuf:"varint,4,opt,name=no_ack,json=noAck,proto3" json:"no_ack,omitempty"`
	// If true and no_ack is false then the message returned by the requests is
	// automatically acknowledged by Kafka-Pixy before the request completes.
	AutoAck bool `protobuf:"varint,5,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
	// If both no_ack and auto_ack are false (by default), then ack_partition
	// and ack_offset along with cluster-group-topic determine the message that
	// should be acknowledged by the request.
	AckPartition int32 `protobuf:"varint,6,opt,name=ack_partition,json=ackPartition,proto3" json:"ack_partition,omitempty"`
	AckOffset    int64 `protobuf:"varint,7,opt,name=ack_offset,json=ackOffset,proto3" json:"ack_offset,omitempty"`
}

func (x *ConsNAckRq) Reset() {
	*x = ConsNAckRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsNAckRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsNAckRq) ProtoMessage() {}

func (x *ConsNAckRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsNAckRq.ProtoReflect.Descriptor instead.
func (*ConsNAckRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{3}
}

func (x *ConsNAckRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ConsNAckRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConsNAckRq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ConsNAckRq) GetNoAck() bool {
	if x != nil {
		return x.NoAck
	}
	return false
}

func (x *ConsNAckRq) GetAutoAck() bool {
	if x != nil {
		return x.AutoAck
	}
	return false
}

func (x *ConsNAckRq) GetAckPartition() int32 {
	if x != nil {
		return x.AckPartition
	}
	return 0
}

func (x *ConsNAckRq) GetAckOffset() int64 {
	if x != nil {
		return x.AckOffset
	}
	return 0
}

type ConsRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition the message was read from.
	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Offset of the read message in the partition.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Key that was used to produce the message, unless key_undefined is true,
	// then it is undefined.
	KeyValue []byte `protobuf:"bytes,3,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// If true then the message was produced to a random partition.
	KeyUndefined bool `protobuf:"varint,4,opt,name=key_undefined,json=keyUndefined,proto3" json:"key_undefined,omitempty"`
	// Message body
	Message []byte `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Headers associated with the message
	Headers []*RecordHeader `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *ConsRs) Reset() {
	*x = ConsRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsRs) ProtoMessage() {}

func (x *ConsRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsRs.ProtoReflect.Descriptor instead.
func (*ConsRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{4}
}

func (x *ConsRs) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ConsRs) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ConsRs) GetKeyValue() []byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *ConsRs) GetKeyUndefined() bool {
	if x != nil {
		return x.KeyUndefined
	}
	return false
}

func (x *ConsRs) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConsRs) GetHeaders() []*RecordHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type AckRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster to operate on.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic to produce to.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Name of a consumer group.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// Partition that the acknowledged message was consumed from.
	Partition int32 `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	// Offset in the partition that the acknowledged message was consumed from.
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AckRq) Reset() {
	*x = AckRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRq) ProtoMessage() {}

func (x *AckRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRq.ProtoReflect.Descriptor instead.
func (*AckRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{5}
}

func (x *AckRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AckRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *AckRq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AckRq) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *AckRq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AckRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckRs) Reset() {
	*x = AckRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRs) ProtoMessage() {}

func (x *AckRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRs.ProtoReflect.Descriptor instead.
func (*AckRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{6}
}

type PartitionOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Partition this structure describes
	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// The beginning offset
	Begin int64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	// The ending offset
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// The number of messages in the partition
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// Offset in the partition
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// The number of un-consumed messages in the partition
	Lag int64 `protobuf:"varint,6,opt,name=lag,proto3" json:"lag,omitempty"`
	// Metatdata associated with the partition
	Metadata string `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// human readable representation of sparsely committed ranges
	SparseAcks string `protobuf:"bytes,8,opt,name=sparse_acks,json=sparseAcks,proto3" json:"sparse_acks,omitempty"`
}

func (x *PartitionOffset) Reset() {
	*x = PartitionOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionOffset) ProtoMessage() {}

func (x *PartitionOffset) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionOffset.ProtoReflect.Descriptor instead.
func (*PartitionOffset) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionOffset) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PartitionOffset) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *PartitionOffset) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *PartitionOffset) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PartitionOffset) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PartitionOffset) GetLag() int64 {
	if x != nil {
		return x.Lag
	}
	return 0
}

func (x *PartitionOffset) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *PartitionOffset) GetSparseAcks() string {
	if x != nil {
		return x.SparseAcks
	}
	return ""
}

type GetOffsetsRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Name of a consumer group.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetOffsetsRq) Reset() {
	*x = GetOffsetsRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffsetsRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffsetsRq) ProtoMessage() {}

func (x *GetOffsetsRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffsetsRq.ProtoReflect.Descriptor instead.
func (*GetOffsetsRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{8}
}

func (x *GetOffsetsRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetOffsetsRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetOffsetsRq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GetOffsetsRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offsets []*PartitionOffset `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *GetOffsetsRs) Reset() {
	*x = GetOffsetsRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOffsetsRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffsetsRs) ProtoMessage() {}

func (x *GetOffsetsRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffsetsRs.ProtoReflect.Descriptor instead.
func (*GetOffsetsRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{9}
}

func (x *GetOffsetsRs) GetOffsets() []*PartitionOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

// Partition metadata as retrieved from kafka
type PartitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Partition this structure describes
	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// The node id for the kafka broker currently acting as leader for this partition.
	// If no leader exists because we are in the middle of a leader election this id will be -1.
	Leader int32 `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// The set of alive nodes that currently acts as slaves for the leader for this partition.
	Replicas []int32 `protobuf:"varint,3,rep,packed,name=replicas,proto3" json:"replicas,omitempty"`
	// The set subset of the replicas that are "caught up" to the leader
	Isr []int32 `protobuf:"varint,4,rep,packed,name=isr,proto3" json:"isr,omitempty"`
}

func (x *PartitionMetadata) Reset() {
	*x = PartitionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionMetadata) ProtoMessage() {}

func (x *PartitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionMetadata.ProtoReflect.Descriptor instead.
func (*PartitionMetadata) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{10}
}

func (x *PartitionMetadata) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PartitionMetadata) GetLeader() int32 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *PartitionMetadata) GetReplicas() []int32 {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *PartitionMetadata) GetIsr() []int32 {
	if x != nil {
		return x.Isr
	}
	return nil
}

type GetTopicMetadataRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Should include partition metadata
	WithPartitions bool `protobuf:"varint,3,opt,name=with_partitions,json=withPartitions,proto3" json:"with_partitions,omitempty"`
}

func (x *GetTopicMetadataRq) Reset() {
	*x = GetTopicMetadataRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopicMetadataRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicMetadataRq) ProtoMessage() {}

func (x *GetTopicMetadataRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicMetadataRq.ProtoReflect.Descriptor instead.
func (*GetTopicMetadataRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{11}
}

func (x *GetTopicMetadataRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetTopicMetadataRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetTopicMetadataRq) GetWithPartitions() bool {
	if x != nil {
		return x.WithPartitions
	}
	return false
}

type GetTopicMetadataRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of this metadata
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Config values
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional list of metadata for the partitions of this topic
	Partitions []*PartitionMetadata `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *GetTopicMetadataRs) Reset() {
	*x = GetTopicMetadataRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopicMetadataRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicMetadataRs) ProtoMessage() {}

func (x *GetTopicMetadataRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicMetadataRs.ProtoReflect.Descriptor instead.
func (*GetTopicMetadataRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{12}
}

func (x *GetTopicMetadataRs) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetTopicMetadataRs) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetTopicMetadataRs) GetPartitions() []*PartitionMetadata {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type ListTopicRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics map[string]*GetTopicMetadataRs `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListTopicRs) Reset() {
	*x = ListTopicRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicRs) ProtoMessage() {}

func (x *ListTopicRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicRs.ProtoReflect.Descriptor instead.
func (*ListTopicRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{13}
}

func (x *ListTopicRs) GetTopics() map[string]*GetTopicMetadataRs {
	if x != nil {
		return x.Topics
	}
	return nil
}

type ListTopicRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Should include partition metadata
	WithPartitions bool `protobuf:"varint,2,opt,name=with_partitions,json=withPartitions,proto3" json:"with_partitions,omitempty"`
}

func (x *ListTopicRq) Reset() {
	*x = ListTopicRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicRq) ProtoMessage() {}

func (x *ListTopicRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicRq.ProtoReflect.Descriptor instead.
func (*ListTopicRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{14}
}

func (x *ListTopicRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListTopicRq) GetWithPartitions() bool {
	if x != nil {
		return x.WithPartitions
	}
	return false
}

type ListConsumersRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// If non empty, return only the specified group in the result
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *ListConsumersRq) Reset() {
	*x = ListConsumersRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersRq) ProtoMessage() {}

func (x *ListConsumersRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersRq.ProtoReflect.Descriptor instead.
func (*ListConsumersRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{15}
}

func (x *ListConsumersRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListConsumersRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ListConsumersRq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ConsumerPartitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partitions []int32 `protobuf:"varint,1,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *ConsumerPartitions) Reset() {
	*x = ConsumerPartitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerPartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerPartitions) ProtoMessage() {}

func (x *ConsumerPartitions) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerPartitions.ProtoReflect.Descriptor instead.
func (*ConsumerPartitions) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{16}
}

func (x *ConsumerPartitions) GetPartitions() []int32 {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type ConsumerGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers map[string]*ConsumerPartitions `protobuf:"bytes,1,rep,name=consumers,proto3" json:"consumers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConsumerGroups) Reset() {
	*x = ConsumerGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerGroups) ProtoMessage() {}

func (x *ConsumerGroups) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerGroups.ProtoReflect.Descriptor instead.
func (*ConsumerGroups) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{17}
}

func (x *ConsumerGroups) GetConsumers() map[string]*ConsumerPartitions {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type ListConsumersRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups map[string]*ConsumerGroups `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListConsumersRs) Reset() {
	*x = ListConsumersRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersRs) ProtoMessage() {}

func (x *ListConsumersRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersRs.ProtoReflect.Descriptor instead.
func (*ListConsumersRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{18}
}

func (x *ListConsumersRs) GetGroups() map[string]*ConsumerGroups {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SetOffsetsRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a Kafka cluster
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Name of a topic
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Name of a consumer group.
	Group   string             `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Offsets []*PartitionOffset `protobuf:"bytes,4,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *SetOffsetsRq) Reset() {
	*x = SetOffsetsRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOffsetsRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOffsetsRq) ProtoMessage() {}

func (x *SetOffsetsRq) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOffsetsRq.ProtoReflect.Descriptor instead.
func (*SetOffsetsRq) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{19}
}

func (x *SetOffsetsRq) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *SetOffsetsRq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SetOffsetsRq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SetOffsetsRq) GetOffsets() []*PartitionOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type SetOffsetsRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOffsetsRs) Reset() {
	*x = SetOffsetsRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapixy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOffsetsRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOffsetsRs) ProtoMessage() {}

func (x *SetOffsetsRs) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapixy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOffsetsRs.ProtoReflect.Descriptor instead.
func (*SetOffsetsRs) Descriptor() ([]byte, []int) {
	return file_kafkapixy_proto_rawDescGZIP(), []int{20}
}

var File_kafkapixy_proto protoreflect.FileDescriptor

var file_kafkapixy_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x70, 0x69, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x06, 0x50, 0x72,
	0x6f, 0x64, 0x52, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x64,
	0x52, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x73, 0x4e, 0x41, 0x63, 0x6b, 0x52, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e,
	0x6f, 0x41, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x41, 0x63,
	0x6b, 0x52, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x07, 0x0a, 0x05, 0x41, 0x63, 0x6b, 0x52, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x73, 0x22,
	0x54, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x22, 0x77, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x73, 0x72, 0x22, 0x6d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x34, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x73, 0x32, 0xe9, 0x02, 0x0a, 0x09, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x69, 0x78, 0x79,
	0x12, 0x1d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x07, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x52, 0x71, 0x1a, 0x07, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x52, 0x73, 0x22, 0x00, 0x12,
	0x25, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4e, 0x41, 0x63, 0x6b, 0x12, 0x0b,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x4e, 0x41, 0x63, 0x6b, 0x52, 0x71, 0x1a, 0x07, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x52, 0x73, 0x22, 0x00, 0x12, 0x17, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x06, 0x2e,
	0x41, 0x63, 0x6b, 0x52, 0x71, 0x1a, 0x06, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x73, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x71, 0x1a, 0x0d, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x0a, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x71, 0x1a, 0x0d, 0x2e, 0x53, 0x65, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x0c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x71, 0x1a, 0x0c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x71, 0x1a, 0x10, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x73, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x71, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x73, 0x22, 0x00, 0x42, 0x4f,
	0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x70,
	0x69, 0x78, 0x79, 0x42, 0x0e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x69, 0x78, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x67, 0x75, 0x6e, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2d,
	0x70, 0x69, 0x78, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kafkapixy_proto_rawDescOnce sync.Once
	file_kafkapixy_proto_rawDescData = file_kafkapixy_proto_rawDesc
)

func file_kafkapixy_proto_rawDescGZIP() []byte {
	file_kafkapixy_proto_rawDescOnce.Do(func() {
		file_kafkapixy_proto_rawDescData = protoimpl.X.CompressGZIP(file_kafkapixy_proto_rawDescData)
	})
	return file_kafkapixy_proto_rawDescData
}

var file_kafkapixy_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_kafkapixy_proto_goTypes = []interface{}{
	(*RecordHeader)(nil),       // 0: RecordHeader
	(*ProdRq)(nil),             // 1: ProdRq
	(*ProdRs)(nil),             // 2: ProdRs
	(*ConsNAckRq)(nil),         // 3: ConsNAckRq
	(*ConsRs)(nil),             // 4: ConsRs
	(*AckRq)(nil),              // 5: AckRq
	(*AckRs)(nil),              // 6: AckRs
	(*PartitionOffset)(nil),    // 7: PartitionOffset
	(*GetOffsetsRq)(nil),       // 8: GetOffsetsRq
	(*GetOffsetsRs)(nil),       // 9: GetOffsetsRs
	(*PartitionMetadata)(nil),  // 10: PartitionMetadata
	(*GetTopicMetadataRq)(nil), // 11: GetTopicMetadataRq
	(*GetTopicMetadataRs)(nil), // 12: GetTopicMetadataRs
	(*ListTopicRs)(nil),        // 13: ListTopicRs
	(*ListTopicRq)(nil),        // 14: ListTopicRq
	(*ListConsumersRq)(nil),    // 15: ListConsumersRq
	(*ConsumerPartitions)(nil), // 16: ConsumerPartitions
	(*ConsumerGroups)(nil),     // 17: ConsumerGroups
	(*ListConsumersRs)(nil),    // 18: ListConsumersRs
	(*SetOffsetsRq)(nil),       // 19: SetOffsetsRq
	(*SetOffsetsRs)(nil),       // 20: SetOffsetsRs
	nil,                        // 21: GetTopicMetadataRs.ConfigEntry
	nil,                        // 22: ListTopicRs.TopicsEntry
	nil,                        // 23: ConsumerGroups.ConsumersEntry
	nil,                        // 24: ListConsumersRs.GroupsEntry
}
var file_kafkapixy_proto_depIdxs = []int32{
	0,  // 0: ProdRq.headers:type_name -> RecordHeader
	0,  // 1: ConsRs.headers:type_name -> RecordHeader
	7,  // 2: GetOffsetsRs.offsets:type_name -> PartitionOffset
	21, // 3: GetTopicMetadataRs.config:type_name -> GetTopicMetadataRs.ConfigEntry
	10, // 4: GetTopicMetadataRs.partitions:type_name -> PartitionMetadata
	22, // 5: ListTopicRs.topics:type_name -> ListTopicRs.TopicsEntry
	23, // 6: ConsumerGroups.consumers:type_name -> ConsumerGroups.ConsumersEntry
	24, // 7: ListConsumersRs.groups:type_name -> ListConsumersRs.GroupsEntry
	7,  // 8: SetOffsetsRq.offsets:type_name -> PartitionOffset
	12, // 9: ListTopicRs.TopicsEntry.value:type_name -> GetTopicMetadataRs
	16, // 10: ConsumerGroups.ConsumersEntry.value:type_name -> ConsumerPartitions
	17, // 11: ListConsumersRs.GroupsEntry.value:type_name -> ConsumerGroups
	1,  // 12: KafkaPixy.Produce:input_type -> ProdRq
	3,  // 13: KafkaPixy.ConsumeNAck:input_type -> ConsNAckRq
	5,  // 14: KafkaPixy.Ack:input_type -> AckRq
	8,  // 15: KafkaPixy.GetOffsets:input_type -> GetOffsetsRq
	19, // 16: KafkaPixy.SetOffsets:input_type -> SetOffsetsRq
	14, // 17: KafkaPixy.ListTopics:input_type -> ListTopicRq
	15, // 18: KafkaPixy.ListConsumers:input_type -> ListConsumersRq
	11, // 19: KafkaPixy.GetTopicMetadata:input_type -> GetTopicMetadataRq
	2,  // 20: KafkaPixy.Produce:output_type -> ProdRs
	4,  // 21: KafkaPixy.ConsumeNAck:output_type -> ConsRs
	6,  // 22: KafkaPixy.Ack:output_type -> AckRs
	9,  // 23: KafkaPixy.GetOffsets:output_type -> GetOffsetsRs
	20, // 24: KafkaPixy.SetOffsets:output_type -> SetOffsetsRs
	13, // 25: KafkaPixy.ListTopics:output_type -> ListTopicRs
	18, // 26: KafkaPixy.ListConsumers:output_type -> ListConsumersRs
	12, // 27: KafkaPixy.GetTopicMetadata:output_type -> GetTopicMetadataRs
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_kafkapixy_proto_init() }
func file_kafkapixy_proto_init() {
	if File_kafkapixy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kafkapixy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProdRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsNAckRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffsetsRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOffsetsRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopicMetadataRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopicMetadataRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsumersRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerPartitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConsumersRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOffsetsRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapixy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOffsetsRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kafkapixy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kafkapixy_proto_goTypes,
		DependencyIndexes: file_kafkapixy_proto_depIdxs,
		MessageInfos:      file_kafkapixy_proto_msgTypes,
	}.Build()
	File_kafkapixy_proto = out.File
	file_kafkapixy_proto_rawDesc = nil
	file_kafkapixy_proto_goTypes = nil
	file_kafkapixy_proto_depIdxs = nil
}
