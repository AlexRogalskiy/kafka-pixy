// Code generated by protoc-gen-go.
// source: grpc.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	ProdReq
	ProdRes
	ConsReq
	ConsRes
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProdReq struct {
	Proxy        string `protobuf:"bytes,1,opt,name=proxy" json:"proxy,omitempty"`
	Topic        string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	KeyValue     []byte `protobuf:"bytes,3,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	KeyUndefined bool   `protobuf:"varint,4,opt,name=key_undefined,json=keyUndefined" json:"key_undefined,omitempty"`
	Message      []byte `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	AsyncMode    bool   `protobuf:"varint,6,opt,name=async_mode,json=asyncMode" json:"async_mode,omitempty"`
}

func (m *ProdReq) Reset()                    { *m = ProdReq{} }
func (m *ProdReq) String() string            { return proto.CompactTextString(m) }
func (*ProdReq) ProtoMessage()               {}
func (*ProdReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProdReq) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func (m *ProdReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ProdReq) GetKeyValue() []byte {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *ProdReq) GetKeyUndefined() bool {
	if m != nil {
		return m.KeyUndefined
	}
	return false
}

func (m *ProdReq) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ProdReq) GetAsyncMode() bool {
	if m != nil {
		return m.AsyncMode
	}
	return false
}

type ProdRes struct {
	Partition int32 `protobuf:"varint,1,opt,name=partition" json:"partition,omitempty"`
	Offset    int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ProdRes) Reset()                    { *m = ProdRes{} }
func (m *ProdRes) String() string            { return proto.CompactTextString(m) }
func (*ProdRes) ProtoMessage()               {}
func (*ProdRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProdRes) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ProdRes) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ConsReq struct {
	Proxy string `protobuf:"bytes,1,opt,name=proxy" json:"proxy,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Group string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (m *ConsReq) Reset()                    { *m = ConsReq{} }
func (m *ConsReq) String() string            { return proto.CompactTextString(m) }
func (*ConsReq) ProtoMessage()               {}
func (*ConsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConsReq) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func (m *ConsReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ConsReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type ConsRes struct {
	Partition    int32  `protobuf:"varint,1,opt,name=partition" json:"partition,omitempty"`
	Offset       int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	KeyValue     []byte `protobuf:"bytes,3,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	KeyUndefined bool   `protobuf:"varint,4,opt,name=key_undefined,json=keyUndefined" json:"key_undefined,omitempty"`
	Message      []byte `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ConsRes) Reset()                    { *m = ConsRes{} }
func (m *ConsRes) String() string            { return proto.CompactTextString(m) }
func (*ConsRes) ProtoMessage()               {}
func (*ConsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConsRes) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ConsRes) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsRes) GetKeyValue() []byte {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *ConsRes) GetKeyUndefined() bool {
	if m != nil {
		return m.KeyUndefined
	}
	return false
}

func (m *ConsRes) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ProdReq)(nil), "ProdReq")
	proto.RegisterType((*ProdRes)(nil), "ProdRes")
	proto.RegisterType((*ConsReq)(nil), "ConsReq")
	proto.RegisterType((*ConsRes)(nil), "ConsRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KafkaPixy service

type KafkaPixyClient interface {
	Produce(ctx context.Context, in *ProdReq, opts ...grpc.CallOption) (*ProdRes, error)
	Consume(ctx context.Context, in *ConsReq, opts ...grpc.CallOption) (*ConsRes, error)
}

type kafkaPixyClient struct {
	cc *grpc.ClientConn
}

func NewKafkaPixyClient(cc *grpc.ClientConn) KafkaPixyClient {
	return &kafkaPixyClient{cc}
}

func (c *kafkaPixyClient) Produce(ctx context.Context, in *ProdReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := grpc.Invoke(ctx, "/KafkaPixy/Produce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaPixyClient) Consume(ctx context.Context, in *ConsReq, opts ...grpc.CallOption) (*ConsRes, error) {
	out := new(ConsRes)
	err := grpc.Invoke(ctx, "/KafkaPixy/Consume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KafkaPixy service

type KafkaPixyServer interface {
	Produce(context.Context, *ProdReq) (*ProdRes, error)
	Consume(context.Context, *ConsReq) (*ConsRes, error)
}

func RegisterKafkaPixyServer(s *grpc.Server, srv KafkaPixyServer) {
	s.RegisterService(&_KafkaPixy_serviceDesc, srv)
}

func _KafkaPixy_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaPixyServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KafkaPixy/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaPixyServer).Produce(ctx, req.(*ProdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaPixy_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaPixyServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KafkaPixy/Consume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaPixyServer).Consume(ctx, req.(*ConsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _KafkaPixy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KafkaPixy",
	HandlerType: (*KafkaPixyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _KafkaPixy_Produce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _KafkaPixy_Consume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x4a, 0x3b, 0x31,
	0x10, 0xc6, 0xbb, 0x6d, 0xb7, 0x6d, 0x86, 0xfe, 0x2f, 0xa1, 0xfc, 0x09, 0x55, 0xb1, 0xc4, 0x4b,
	0x4f, 0x3d, 0xe8, 0x03, 0x08, 0x7a, 0x2c, 0x85, 0x12, 0xd0, 0x83, 0x97, 0x92, 0xee, 0xce, 0x96,
	0x65, 0xed, 0x26, 0x26, 0xbb, 0xd2, 0x3c, 0x8b, 0x2f, 0xe1, 0x23, 0x4a, 0xb2, 0x0d, 0x9e, 0x15,
	0xbc, 0xcd, 0xef, 0xcb, 0x4c, 0xf8, 0xe6, 0x4b, 0x00, 0x0e, 0x46, 0x67, 0x2b, 0x6d, 0x54, 0xa3,
	0xf8, 0x67, 0x02, 0xe3, 0xad, 0x51, 0xb9, 0xc0, 0x37, 0x3a, 0x83, 0x54, 0x1b, 0x75, 0x72, 0x2c,
	0x59, 0x24, 0x4b, 0x22, 0x3a, 0xf0, 0x6a, 0xa3, 0x74, 0x99, 0xb1, 0x7e, 0xa7, 0x06, 0xa0, 0x17,
	0x40, 0x2a, 0x74, 0xbb, 0x77, 0xf9, 0xda, 0x22, 0x1b, 0x2c, 0x92, 0xe5, 0x54, 0x4c, 0x2a, 0x74,
	0xcf, 0x9e, 0xe9, 0x0d, 0xfc, 0xf3, 0x87, 0x6d, 0x9d, 0x63, 0x51, 0xd6, 0x98, 0xb3, 0xe1, 0x22,
	0x59, 0x4e, 0xc4, 0xb4, 0x42, 0xf7, 0x14, 0x35, 0xca, 0x60, 0x7c, 0x44, 0x6b, 0xe5, 0x01, 0x59,
	0x1a, 0xe6, 0x23, 0xd2, 0x2b, 0x00, 0x69, 0x5d, 0x9d, 0xed, 0x8e, 0x2a, 0x47, 0x36, 0x0a, 0xb3,
	0x24, 0x28, 0x1b, 0x95, 0x23, 0xbf, 0x8f, 0x8e, 0x2d, 0xbd, 0x04, 0xa2, 0xa5, 0x69, 0xca, 0xa6,
	0x54, 0x75, 0x70, 0x9d, 0x8a, 0x6f, 0x81, 0xfe, 0x87, 0x91, 0x2a, 0x0a, 0x8b, 0x4d, 0xb0, 0x3e,
	0x10, 0x67, 0xe2, 0x6b, 0x18, 0x3f, 0xaa, 0xda, 0xfe, 0x74, 0xe5, 0x19, 0xa4, 0x07, 0xa3, 0x5a,
	0x1d, 0xd6, 0x25, 0xa2, 0x03, 0xfe, 0x91, 0xc4, 0xdb, 0x7e, 0x69, 0xe7, 0x2f, 0xa3, 0xbc, 0xdd,
	0x00, 0x59, 0xcb, 0xa2, 0x92, 0xdb, 0xf2, 0xe4, 0xe8, 0x75, 0x17, 0x5c, 0x9b, 0x21, 0x9d, 0xac,
	0xce, 0x8f, 0x3e, 0x8f, 0x95, 0xe5, 0x3d, 0xdf, 0xe0, 0x57, 0x69, 0x8f, 0xbe, 0xe1, 0x1c, 0xd1,
	0x3c, 0x56, 0x96, 0xf7, 0x1e, 0x86, 0x2f, 0x7d, 0xbd, 0xdf, 0x8f, 0xc2, 0xd7, 0xb9, 0xfb, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xb6, 0x56, 0x65, 0x7a, 0x48, 0x02, 0x00, 0x00,
}
