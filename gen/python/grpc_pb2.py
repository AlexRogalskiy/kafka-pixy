# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='grpc.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\ngrpc.proto\"v\n\x07ProdReq\x12\r\n\x05proxy\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\x11\n\tkey_value\x18\x03 \x01(\x0c\x12\x15\n\rkey_undefined\x18\x04 \x01(\x08\x12\x0f\n\x07message\x18\x05 \x01(\x0c\x12\x12\n\nasync_mode\x18\x06 \x01(\x08\",\n\x07ProdRes\x12\x11\n\tpartition\x18\x01 \x01(\x05\x12\x0e\n\x06offset\x18\x02 \x01(\x03\"6\n\x07\x43onsReq\x12\r\n\x05proxy\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\r\n\x05group\x18\x03 \x01(\t\"g\n\x07\x43onsRes\x12\x11\n\tpartition\x18\x01 \x01(\x05\x12\x0e\n\x06offset\x18\x02 \x01(\x03\x12\x11\n\tkey_value\x18\x03 \x01(\x0c\x12\x15\n\rkey_undefined\x18\x04 \x01(\x08\x12\x0f\n\x07message\x18\x05 \x01(\x0c\x32M\n\tKafkaPixy\x12\x1f\n\x07Produce\x12\x08.ProdReq\x1a\x08.ProdRes\"\x00\x12\x1f\n\x07\x43onsume\x12\x08.ConsReq\x1a\x08.ConsRes\"\x00\x42\x04Z\x02pbb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PRODREQ = _descriptor.Descriptor(
  name='ProdReq',
  full_name='ProdReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='proxy', full_name='ProdReq.proxy', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='ProdReq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_value', full_name='ProdReq.key_value', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_undefined', full_name='ProdReq.key_undefined', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ProdReq.message', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='async_mode', full_name='ProdReq.async_mode', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=14,
  serialized_end=132,
)


_PRODRES = _descriptor.Descriptor(
  name='ProdRes',
  full_name='ProdRes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition', full_name='ProdRes.partition', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='ProdRes.offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=134,
  serialized_end=178,
)


_CONSREQ = _descriptor.Descriptor(
  name='ConsReq',
  full_name='ConsReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='proxy', full_name='ConsReq.proxy', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='ConsReq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='ConsReq.group', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=180,
  serialized_end=234,
)


_CONSRES = _descriptor.Descriptor(
  name='ConsRes',
  full_name='ConsRes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition', full_name='ConsRes.partition', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='ConsRes.offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_value', full_name='ConsRes.key_value', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_undefined', full_name='ConsRes.key_undefined', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ConsRes.message', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=236,
  serialized_end=339,
)

DESCRIPTOR.message_types_by_name['ProdReq'] = _PRODREQ
DESCRIPTOR.message_types_by_name['ProdRes'] = _PRODRES
DESCRIPTOR.message_types_by_name['ConsReq'] = _CONSREQ
DESCRIPTOR.message_types_by_name['ConsRes'] = _CONSRES

ProdReq = _reflection.GeneratedProtocolMessageType('ProdReq', (_message.Message,), dict(
  DESCRIPTOR = _PRODREQ,
  __module__ = 'grpc_pb2'
  # @@protoc_insertion_point(class_scope:ProdReq)
  ))
_sym_db.RegisterMessage(ProdReq)

ProdRes = _reflection.GeneratedProtocolMessageType('ProdRes', (_message.Message,), dict(
  DESCRIPTOR = _PRODRES,
  __module__ = 'grpc_pb2'
  # @@protoc_insertion_point(class_scope:ProdRes)
  ))
_sym_db.RegisterMessage(ProdRes)

ConsReq = _reflection.GeneratedProtocolMessageType('ConsReq', (_message.Message,), dict(
  DESCRIPTOR = _CONSREQ,
  __module__ = 'grpc_pb2'
  # @@protoc_insertion_point(class_scope:ConsReq)
  ))
_sym_db.RegisterMessage(ConsReq)

ConsRes = _reflection.GeneratedProtocolMessageType('ConsRes', (_message.Message,), dict(
  DESCRIPTOR = _CONSRES,
  __module__ = 'grpc_pb2'
  # @@protoc_insertion_point(class_scope:ConsRes)
  ))
_sym_db.RegisterMessage(ConsRes)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\002pb'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class KafkaPixyStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Produce = channel.unary_unary(
          '/KafkaPixy/Produce',
          request_serializer=ProdReq.SerializeToString,
          response_deserializer=ProdRes.FromString,
          )
      self.Consume = channel.unary_unary(
          '/KafkaPixy/Consume',
          request_serializer=ConsReq.SerializeToString,
          response_deserializer=ConsRes.FromString,
          )


  class KafkaPixyServicer(object):

    def Produce(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Consume(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_KafkaPixyServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Produce': grpc.unary_unary_rpc_method_handler(
            servicer.Produce,
            request_deserializer=ProdReq.FromString,
            response_serializer=ProdRes.SerializeToString,
        ),
        'Consume': grpc.unary_unary_rpc_method_handler(
            servicer.Consume,
            request_deserializer=ConsReq.FromString,
            response_serializer=ConsRes.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'KafkaPixy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaKafkaPixyServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Produce(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Consume(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaKafkaPixyStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Produce(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Produce.future = None
    def Consume(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Consume.future = None


  def beta_create_KafkaPixy_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('KafkaPixy', 'Consume'): ConsReq.FromString,
      ('KafkaPixy', 'Produce'): ProdReq.FromString,
    }
    response_serializers = {
      ('KafkaPixy', 'Consume'): ConsRes.SerializeToString,
      ('KafkaPixy', 'Produce'): ProdRes.SerializeToString,
    }
    method_implementations = {
      ('KafkaPixy', 'Consume'): face_utilities.unary_unary_inline(servicer.Consume),
      ('KafkaPixy', 'Produce'): face_utilities.unary_unary_inline(servicer.Produce),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_KafkaPixy_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('KafkaPixy', 'Consume'): ConsReq.SerializeToString,
      ('KafkaPixy', 'Produce'): ProdReq.SerializeToString,
    }
    response_deserializers = {
      ('KafkaPixy', 'Consume'): ConsRes.FromString,
      ('KafkaPixy', 'Produce'): ProdRes.FromString,
    }
    cardinalities = {
      'Consume': cardinality.Cardinality.UNARY_UNARY,
      'Produce': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'KafkaPixy', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
