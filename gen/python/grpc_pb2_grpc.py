# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import grpc_pb2 as grpc__pb2


class KafkaPixyStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Produce = channel.unary_unary(
        '/KafkaPixy/Produce',
        request_serializer=grpc__pb2.ProdReq.SerializeToString,
        response_deserializer=grpc__pb2.ProdRes.FromString,
        )
    self.Consume = channel.unary_unary(
        '/KafkaPixy/Consume',
        request_serializer=grpc__pb2.ConsReq.SerializeToString,
        response_deserializer=grpc__pb2.ConsRes.FromString,
        )
    self.Ack = channel.unary_unary(
        '/KafkaPixy/Ack',
        request_serializer=grpc__pb2.AckReq.SerializeToString,
        response_deserializer=grpc__pb2.AckRes.FromString,
        )


class KafkaPixyServicer(object):

  def Produce(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Consume(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Ack(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_KafkaPixyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Produce': grpc.unary_unary_rpc_method_handler(
          servicer.Produce,
          request_deserializer=grpc__pb2.ProdReq.FromString,
          response_serializer=grpc__pb2.ProdRes.SerializeToString,
      ),
      'Consume': grpc.unary_unary_rpc_method_handler(
          servicer.Consume,
          request_deserializer=grpc__pb2.ConsReq.FromString,
          response_serializer=grpc__pb2.ConsRes.SerializeToString,
      ),
      'Ack': grpc.unary_unary_rpc_method_handler(
          servicer.Ack,
          request_deserializer=grpc__pb2.AckReq.FromString,
          response_serializer=grpc__pb2.AckRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'KafkaPixy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
