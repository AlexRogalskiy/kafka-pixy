# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kafkapixy.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='kafkapixy.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0fkafkapixy.proto\"w\n\x06ProdRq\x12\x0f\n\x07\x63luster\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\x11\n\tkey_value\x18\x03 \x01(\x0c\x12\x15\n\rkey_undefined\x18\x04 \x01(\x08\x12\x0f\n\x07message\x18\x05 \x01(\x0c\x12\x12\n\nasync_mode\x18\x06 \x01(\x08\"+\n\x06ProdRs\x12\x11\n\tpartition\x18\x01 \x01(\x05\x12\x0e\n\x06offset\x18\x02 \x01(\x03\"\x88\x01\n\nConsNAckRq\x12\x0f\n\x07\x63luster\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\r\n\x05group\x18\x03 \x01(\t\x12\x0e\n\x06no_ack\x18\x04 \x01(\x08\x12\x10\n\x08\x61uto_ack\x18\x05 \x01(\x08\x12\x15\n\rack_partition\x18\x06 \x01(\x05\x12\x12\n\nack_offset\x18\x07 \x01(\x03\"f\n\x06\x43onsRs\x12\x11\n\tpartition\x18\x01 \x01(\x05\x12\x0e\n\x06offset\x18\x02 \x01(\x03\x12\x11\n\tkey_value\x18\x03 \x01(\x0c\x12\x15\n\rkey_undefined\x18\x04 \x01(\x08\x12\x0f\n\x07message\x18\x05 \x01(\x0c\"Y\n\x05\x41\x63kRq\x12\x0f\n\x07\x63luster\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\r\n\x05group\x18\x03 \x01(\t\x12\x11\n\tpartition\x18\x04 \x01(\x05\x12\x0e\n\x06offset\x18\x05 \x01(\x03\"\x07\n\x05\x41\x63kRs\"\x93\x01\n\x0fPartitionOffset\x12\x11\n\tpartition\x18\x01 \x01(\x05\x12\r\n\x05\x62\x65gin\x18\x02 \x01(\x03\x12\x0b\n\x03\x65nd\x18\x03 \x01(\x03\x12\r\n\x05\x63ount\x18\x04 \x01(\x03\x12\x0e\n\x06offset\x18\x05 \x01(\x03\x12\x0b\n\x03lag\x18\x06 \x01(\x03\x12\x10\n\x08metadata\x18\x07 \x01(\t\x12\x13\n\x0bsparse_acks\x18\x08 \x01(\t\"=\n\x0cGetOffsetsRq\x12\x0f\n\x07\x63luster\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\r\n\x05group\x18\x03 \x01(\t\"1\n\x0cGetOffsetsRs\x12!\n\x07offsets\x18\x01 \x03(\x0b\x32\x10.PartitionOffset2\x98\x01\n\tKafkaPixy\x12\x1d\n\x07Produce\x12\x07.ProdRq\x1a\x07.ProdRs\"\x00\x12%\n\x0b\x43onsumeNAck\x12\x0b.ConsNAckRq\x1a\x07.ConsRs\"\x00\x12\x17\n\x03\x41\x63k\x12\x06.AckRq\x1a\x06.AckRs\"\x00\x12,\n\nGetOffsets\x12\r.GetOffsetsRq\x1a\r.GetOffsetsRs\"\x00\x42\x04Z\x02pbb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PRODRQ = _descriptor.Descriptor(
  name='ProdRq',
  full_name='ProdRq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster', full_name='ProdRq.cluster', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='ProdRq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_value', full_name='ProdRq.key_value', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_undefined', full_name='ProdRq.key_undefined', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ProdRq.message', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='async_mode', full_name='ProdRq.async_mode', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=19,
  serialized_end=138,
)


_PRODRS = _descriptor.Descriptor(
  name='ProdRs',
  full_name='ProdRs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition', full_name='ProdRs.partition', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='ProdRs.offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=140,
  serialized_end=183,
)


_CONSNACKRQ = _descriptor.Descriptor(
  name='ConsNAckRq',
  full_name='ConsNAckRq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster', full_name='ConsNAckRq.cluster', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='ConsNAckRq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='ConsNAckRq.group', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='no_ack', full_name='ConsNAckRq.no_ack', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='auto_ack', full_name='ConsNAckRq.auto_ack', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ack_partition', full_name='ConsNAckRq.ack_partition', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ack_offset', full_name='ConsNAckRq.ack_offset', index=6,
      number=7, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=186,
  serialized_end=322,
)


_CONSRS = _descriptor.Descriptor(
  name='ConsRs',
  full_name='ConsRs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition', full_name='ConsRs.partition', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='ConsRs.offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_value', full_name='ConsRs.key_value', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key_undefined', full_name='ConsRs.key_undefined', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ConsRs.message', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=324,
  serialized_end=426,
)


_ACKRQ = _descriptor.Descriptor(
  name='AckRq',
  full_name='AckRq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster', full_name='AckRq.cluster', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='AckRq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='AckRq.group', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='partition', full_name='AckRq.partition', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='AckRq.offset', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=428,
  serialized_end=517,
)


_ACKRS = _descriptor.Descriptor(
  name='AckRs',
  full_name='AckRs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=519,
  serialized_end=526,
)


_PARTITIONOFFSET = _descriptor.Descriptor(
  name='PartitionOffset',
  full_name='PartitionOffset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition', full_name='PartitionOffset.partition', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='begin', full_name='PartitionOffset.begin', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='PartitionOffset.end', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count', full_name='PartitionOffset.count', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='PartitionOffset.offset', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lag', full_name='PartitionOffset.lag', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='metadata', full_name='PartitionOffset.metadata', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sparse_acks', full_name='PartitionOffset.sparse_acks', index=7,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=529,
  serialized_end=676,
)


_GETOFFSETSRQ = _descriptor.Descriptor(
  name='GetOffsetsRq',
  full_name='GetOffsetsRq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster', full_name='GetOffsetsRq.cluster', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='GetOffsetsRq.topic', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='GetOffsetsRq.group', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=678,
  serialized_end=739,
)


_GETOFFSETSRS = _descriptor.Descriptor(
  name='GetOffsetsRs',
  full_name='GetOffsetsRs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='offsets', full_name='GetOffsetsRs.offsets', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=741,
  serialized_end=790,
)

_GETOFFSETSRS.fields_by_name['offsets'].message_type = _PARTITIONOFFSET
DESCRIPTOR.message_types_by_name['ProdRq'] = _PRODRQ
DESCRIPTOR.message_types_by_name['ProdRs'] = _PRODRS
DESCRIPTOR.message_types_by_name['ConsNAckRq'] = _CONSNACKRQ
DESCRIPTOR.message_types_by_name['ConsRs'] = _CONSRS
DESCRIPTOR.message_types_by_name['AckRq'] = _ACKRQ
DESCRIPTOR.message_types_by_name['AckRs'] = _ACKRS
DESCRIPTOR.message_types_by_name['PartitionOffset'] = _PARTITIONOFFSET
DESCRIPTOR.message_types_by_name['GetOffsetsRq'] = _GETOFFSETSRQ
DESCRIPTOR.message_types_by_name['GetOffsetsRs'] = _GETOFFSETSRS

ProdRq = _reflection.GeneratedProtocolMessageType('ProdRq', (_message.Message,), dict(
  DESCRIPTOR = _PRODRQ,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:ProdRq)
  ))
_sym_db.RegisterMessage(ProdRq)

ProdRs = _reflection.GeneratedProtocolMessageType('ProdRs', (_message.Message,), dict(
  DESCRIPTOR = _PRODRS,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:ProdRs)
  ))
_sym_db.RegisterMessage(ProdRs)

ConsNAckRq = _reflection.GeneratedProtocolMessageType('ConsNAckRq', (_message.Message,), dict(
  DESCRIPTOR = _CONSNACKRQ,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:ConsNAckRq)
  ))
_sym_db.RegisterMessage(ConsNAckRq)

ConsRs = _reflection.GeneratedProtocolMessageType('ConsRs', (_message.Message,), dict(
  DESCRIPTOR = _CONSRS,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:ConsRs)
  ))
_sym_db.RegisterMessage(ConsRs)

AckRq = _reflection.GeneratedProtocolMessageType('AckRq', (_message.Message,), dict(
  DESCRIPTOR = _ACKRQ,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:AckRq)
  ))
_sym_db.RegisterMessage(AckRq)

AckRs = _reflection.GeneratedProtocolMessageType('AckRs', (_message.Message,), dict(
  DESCRIPTOR = _ACKRS,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:AckRs)
  ))
_sym_db.RegisterMessage(AckRs)

PartitionOffset = _reflection.GeneratedProtocolMessageType('PartitionOffset', (_message.Message,), dict(
  DESCRIPTOR = _PARTITIONOFFSET,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:PartitionOffset)
  ))
_sym_db.RegisterMessage(PartitionOffset)

GetOffsetsRq = _reflection.GeneratedProtocolMessageType('GetOffsetsRq', (_message.Message,), dict(
  DESCRIPTOR = _GETOFFSETSRQ,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:GetOffsetsRq)
  ))
_sym_db.RegisterMessage(GetOffsetsRq)

GetOffsetsRs = _reflection.GeneratedProtocolMessageType('GetOffsetsRs', (_message.Message,), dict(
  DESCRIPTOR = _GETOFFSETSRS,
  __module__ = 'kafkapixy_pb2'
  # @@protoc_insertion_point(class_scope:GetOffsetsRs)
  ))
_sym_db.RegisterMessage(GetOffsetsRs)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\002pb'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class KafkaPixyStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Produce = channel.unary_unary(
          '/KafkaPixy/Produce',
          request_serializer=ProdRq.SerializeToString,
          response_deserializer=ProdRs.FromString,
          )
      self.ConsumeNAck = channel.unary_unary(
          '/KafkaPixy/ConsumeNAck',
          request_serializer=ConsNAckRq.SerializeToString,
          response_deserializer=ConsRs.FromString,
          )
      self.Ack = channel.unary_unary(
          '/KafkaPixy/Ack',
          request_serializer=AckRq.SerializeToString,
          response_deserializer=AckRs.FromString,
          )
      self.GetOffsets = channel.unary_unary(
          '/KafkaPixy/GetOffsets',
          request_serializer=GetOffsetsRq.SerializeToString,
          response_deserializer=GetOffsetsRs.FromString,
          )


  class KafkaPixyServicer(object):

    def Produce(self, request, context):
      """Produce writes a message to a Kafka topic.

      If ProdReq.async_mode is false (default value) then the request will
      block until the message is written to all ISR. In this case the respose
      will contain the partition and offset of the message. This has to be
      used to achive at-least-once deliverability guarantee.
      If ProdReq.async_mode is true, then Kafka-Pixy returns immediately after
      it gets the request and performs write on the backgroud. This mode
      ensures highest throughput but messages can be lost, e.g. if the host
      crashes before Kafka-Pixy has a chance to complete write.

      Hash of ProdReq.key_value is used to determine a partition that the
      message should be written to. If you want a message to go to an random
      partition then set ProdReq.key_undefined to true. Note that if both
      ProdReq.key_undefined and ProdReq.key_value are left default, which is
      empty string and false respectively, then messages will be consitently
      written to a partiticular partition selected by the hash of an empty
      string.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ConsumeNAck(self, request, context):
      """Consume reads a message from a topic and optionally acknowledges a
      message previously consumed from the same topic.

      Requests are performed in long polling fation, that is if all available
      messages have been consumed then the request will block for
      config.yaml:proxies.<cluster>.consumer.long_polling_timeout waiting for
      new messages. If no new messages is produced while waiting the request
      will return gRPC error with 408 status code.

      To consume the first message set ConsNAckReq.no_ack to true, since there
      is no message to acknowledge at this point. In the second and all
      subsequent calls of the method set ConsNAckReq.ack_partition and
      ConsNAckReq.ack_offset to the respective values of ConsRes returned by
      the previous method call. To acknowledge the last consumed message before
      teminating the application call Ack method.

      If a message is not acknowledged within
      config.yaml:proxies.<cluster>.consumer.ack_timeout the it will be returned
      by Kafka-Pixy in ConsRes again possibly to another application.

      If at-least-once delivery guarantee and retries are not desirable, then
      you can set ConsNAckReq.auto_ack to true and Kafka-Pixy will acknowledge
      messages automatically before returning them in ConsRes.

      gRPC error codes:
      * Not Found (5): It just means that all message has been consumed and
      the long polling timeout has elaspsed. Just keep calling this method
      in a loop;
      * Resource Exhausted (8): too many consume requests. Either reduce the
      number of consuming threads or increase
      config.yaml:proxies.<cluster>.consumer.channel_buffer_size;
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Ack(self, request, context):
      """Ack acknowledges a message earlier consumed from a topic.

      This method is provided solely to acknowledge the last consumed message
      before the application terminates. In all other cases ConsumeNAck should
      be used.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetOffsets(self, request, context):
      """Fetches partition offsets for the specified topic and group

      gRPC error codes:
      * Invalid Argument (3): If unable to find the cluster named in the request
      * Internal (13): If Kafka returns an error on offset request
      * NotFound (5): If the group and or topic does not exist
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_KafkaPixyServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Produce': grpc.unary_unary_rpc_method_handler(
            servicer.Produce,
            request_deserializer=ProdRq.FromString,
            response_serializer=ProdRs.SerializeToString,
        ),
        'ConsumeNAck': grpc.unary_unary_rpc_method_handler(
            servicer.ConsumeNAck,
            request_deserializer=ConsNAckRq.FromString,
            response_serializer=ConsRs.SerializeToString,
        ),
        'Ack': grpc.unary_unary_rpc_method_handler(
            servicer.Ack,
            request_deserializer=AckRq.FromString,
            response_serializer=AckRs.SerializeToString,
        ),
        'GetOffsets': grpc.unary_unary_rpc_method_handler(
            servicer.GetOffsets,
            request_deserializer=GetOffsetsRq.FromString,
            response_serializer=GetOffsetsRs.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'KafkaPixy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaKafkaPixyServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Produce(self, request, context):
      """Produce writes a message to a Kafka topic.

      If ProdReq.async_mode is false (default value) then the request will
      block until the message is written to all ISR. In this case the respose
      will contain the partition and offset of the message. This has to be
      used to achive at-least-once deliverability guarantee.
      If ProdReq.async_mode is true, then Kafka-Pixy returns immediately after
      it gets the request and performs write on the backgroud. This mode
      ensures highest throughput but messages can be lost, e.g. if the host
      crashes before Kafka-Pixy has a chance to complete write.

      Hash of ProdReq.key_value is used to determine a partition that the
      message should be written to. If you want a message to go to an random
      partition then set ProdReq.key_undefined to true. Note that if both
      ProdReq.key_undefined and ProdReq.key_value are left default, which is
      empty string and false respectively, then messages will be consitently
      written to a partiticular partition selected by the hash of an empty
      string.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ConsumeNAck(self, request, context):
      """Consume reads a message from a topic and optionally acknowledges a
      message previously consumed from the same topic.

      Requests are performed in long polling fation, that is if all available
      messages have been consumed then the request will block for
      config.yaml:proxies.<cluster>.consumer.long_polling_timeout waiting for
      new messages. If no new messages is produced while waiting the request
      will return gRPC error with 408 status code.

      To consume the first message set ConsNAckReq.no_ack to true, since there
      is no message to acknowledge at this point. In the second and all
      subsequent calls of the method set ConsNAckReq.ack_partition and
      ConsNAckReq.ack_offset to the respective values of ConsRes returned by
      the previous method call. To acknowledge the last consumed message before
      teminating the application call Ack method.

      If a message is not acknowledged within
      config.yaml:proxies.<cluster>.consumer.ack_timeout the it will be returned
      by Kafka-Pixy in ConsRes again possibly to another application.

      If at-least-once delivery guarantee and retries are not desirable, then
      you can set ConsNAckReq.auto_ack to true and Kafka-Pixy will acknowledge
      messages automatically before returning them in ConsRes.

      gRPC error codes:
      * Not Found (5): It just means that all message has been consumed and
      the long polling timeout has elaspsed. Just keep calling this method
      in a loop;
      * Resource Exhausted (8): too many consume requests. Either reduce the
      number of consuming threads or increase
      config.yaml:proxies.<cluster>.consumer.channel_buffer_size;
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Ack(self, request, context):
      """Ack acknowledges a message earlier consumed from a topic.

      This method is provided solely to acknowledge the last consumed message
      before the application terminates. In all other cases ConsumeNAck should
      be used.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetOffsets(self, request, context):
      """Fetches partition offsets for the specified topic and group

      gRPC error codes:
      * Invalid Argument (3): If unable to find the cluster named in the request
      * Internal (13): If Kafka returns an error on offset request
      * NotFound (5): If the group and or topic does not exist
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaKafkaPixyStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Produce(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Produce writes a message to a Kafka topic.

      If ProdReq.async_mode is false (default value) then the request will
      block until the message is written to all ISR. In this case the respose
      will contain the partition and offset of the message. This has to be
      used to achive at-least-once deliverability guarantee.
      If ProdReq.async_mode is true, then Kafka-Pixy returns immediately after
      it gets the request and performs write on the backgroud. This mode
      ensures highest throughput but messages can be lost, e.g. if the host
      crashes before Kafka-Pixy has a chance to complete write.

      Hash of ProdReq.key_value is used to determine a partition that the
      message should be written to. If you want a message to go to an random
      partition then set ProdReq.key_undefined to true. Note that if both
      ProdReq.key_undefined and ProdReq.key_value are left default, which is
      empty string and false respectively, then messages will be consitently
      written to a partiticular partition selected by the hash of an empty
      string.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      raise NotImplementedError()
    Produce.future = None
    def ConsumeNAck(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Consume reads a message from a topic and optionally acknowledges a
      message previously consumed from the same topic.

      Requests are performed in long polling fation, that is if all available
      messages have been consumed then the request will block for
      config.yaml:proxies.<cluster>.consumer.long_polling_timeout waiting for
      new messages. If no new messages is produced while waiting the request
      will return gRPC error with 408 status code.

      To consume the first message set ConsNAckReq.no_ack to true, since there
      is no message to acknowledge at this point. In the second and all
      subsequent calls of the method set ConsNAckReq.ack_partition and
      ConsNAckReq.ack_offset to the respective values of ConsRes returned by
      the previous method call. To acknowledge the last consumed message before
      teminating the application call Ack method.

      If a message is not acknowledged within
      config.yaml:proxies.<cluster>.consumer.ack_timeout the it will be returned
      by Kafka-Pixy in ConsRes again possibly to another application.

      If at-least-once delivery guarantee and retries are not desirable, then
      you can set ConsNAckReq.auto_ack to true and Kafka-Pixy will acknowledge
      messages automatically before returning them in ConsRes.

      gRPC error codes:
      * Not Found (5): It just means that all message has been consumed and
      the long polling timeout has elaspsed. Just keep calling this method
      in a loop;
      * Resource Exhausted (8): too many consume requests. Either reduce the
      number of consuming threads or increase
      config.yaml:proxies.<cluster>.consumer.channel_buffer_size;
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      raise NotImplementedError()
    ConsumeNAck.future = None
    def Ack(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Ack acknowledges a message earlier consumed from a topic.

      This method is provided solely to acknowledge the last consumed message
      before the application terminates. In all other cases ConsumeNAck should
      be used.

      gRPC error codes:
      * Invalid Argument (3): see the status description for details;
      * Internal (13): see the status description and logs for details;
      """
      raise NotImplementedError()
    Ack.future = None
    def GetOffsets(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Fetches partition offsets for the specified topic and group

      gRPC error codes:
      * Invalid Argument (3): If unable to find the cluster named in the request
      * Internal (13): If Kafka returns an error on offset request
      * NotFound (5): If the group and or topic does not exist
      """
      raise NotImplementedError()
    GetOffsets.future = None


  def beta_create_KafkaPixy_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('KafkaPixy', 'Ack'): AckRq.FromString,
      ('KafkaPixy', 'ConsumeNAck'): ConsNAckRq.FromString,
      ('KafkaPixy', 'GetOffsets'): GetOffsetsRq.FromString,
      ('KafkaPixy', 'Produce'): ProdRq.FromString,
    }
    response_serializers = {
      ('KafkaPixy', 'Ack'): AckRs.SerializeToString,
      ('KafkaPixy', 'ConsumeNAck'): ConsRs.SerializeToString,
      ('KafkaPixy', 'GetOffsets'): GetOffsetsRs.SerializeToString,
      ('KafkaPixy', 'Produce'): ProdRs.SerializeToString,
    }
    method_implementations = {
      ('KafkaPixy', 'Ack'): face_utilities.unary_unary_inline(servicer.Ack),
      ('KafkaPixy', 'ConsumeNAck'): face_utilities.unary_unary_inline(servicer.ConsumeNAck),
      ('KafkaPixy', 'GetOffsets'): face_utilities.unary_unary_inline(servicer.GetOffsets),
      ('KafkaPixy', 'Produce'): face_utilities.unary_unary_inline(servicer.Produce),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_KafkaPixy_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('KafkaPixy', 'Ack'): AckRq.SerializeToString,
      ('KafkaPixy', 'ConsumeNAck'): ConsNAckRq.SerializeToString,
      ('KafkaPixy', 'GetOffsets'): GetOffsetsRq.SerializeToString,
      ('KafkaPixy', 'Produce'): ProdRq.SerializeToString,
    }
    response_deserializers = {
      ('KafkaPixy', 'Ack'): AckRs.FromString,
      ('KafkaPixy', 'ConsumeNAck'): ConsRs.FromString,
      ('KafkaPixy', 'GetOffsets'): GetOffsetsRs.FromString,
      ('KafkaPixy', 'Produce'): ProdRs.FromString,
    }
    cardinalities = {
      'Ack': cardinality.Cardinality.UNARY_UNARY,
      'ConsumeNAck': cardinality.Cardinality.UNARY_UNARY,
      'GetOffsets': cardinality.Cardinality.UNARY_UNARY,
      'Produce': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'KafkaPixy', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
